#pragma once
#include <iostream>
#include <string>
#include <unordered_set>
#include <fstream>
#include <cctype>
#include <cstdlib>
#include <limits>
#include "BoardGame_Classes.h"
using namespace std;

class WordTicTacToeBoard : public Board <char>
{
private:
    char** board;
    int rows, columns;
    unordered_set<string> dictionary;

    void loadDictionary(const string& filename) {
        ifstream file(filename);
        string word;
        while (file >> word) {
            dictionary.insert(word);
        }
    }

    bool isValidWord(const string& word) {
        return dictionary.find(word) != dictionary.end();
    }

public:
    int n_moves;
    WordTicTacToeBoard() {
        this->rows = this->columns = 3;
        this->board = new char* [this->rows];
        for (int i = 0; i < this->rows; i++) {
            this->board[i] = new char[this->columns];
            for (int j = 0; j < this->columns; j++) {
                this->board[i][j] = 0;
            }
        }
        this->n_moves = 0;
        loadDictionary("dic.txt");
    }

    bool update_board(int x, int y, char mark) {
        if (x >= 0 && x < this->rows && y >= 0 && y < this->columns && this->board[x][y] == 0)
        {
            this->board[x][y] = mark;
            this->n_moves++;
            return true;
        }
        return false;
    }

    void display_board() {
        for (int i = 0; i < this->rows; i++)
        {
            cout << "================================\n";
            cout << "|";
            for (int j = 0; j < this->columns; j++)
            {
                if (this->board[i][j] != 0)
                {
                    cout << "   " << this->board[i][j] << "    |  ";
                }
                else {
                    cout << " (" << i << "," << j << ")  |  ";
                }
            }
            cout << "\n";
        }
        cout << "================================\n";
        cout << "\n";
    }

    bool is_win() {
        for (int i = 0; i < this->rows; i++)
        {
            string row_WordLeftToRight = "", row_WordRightToLeft = "";
            for (int j = 0; j < this->columns; j++)
            {
                row_WordLeftToRight += this->board[i][j];
                row_WordRightToLeft += this->board[i][this->columns - 1 - j];
            }
            if (isValidWord(row_WordLeftToRight) || isValidWord(row_WordRightToLeft))
            {
                return true;
            }
        }

        for (int j = 0; j < this->columns; j++)
        {
            string col_WordUpToDown = "", col_WordDownToUp = "";
            for (int i = 0; i < this->rows; i++) {
                col_WordUpToDown += this->board[i][j];
                col_WordDownToUp += this->board[this->rows - 1 - i][j];
            }
            if (isValidWord(col_WordUpToDown) || isValidWord(col_WordDownToUp)) {
                return true;
            }
        }

        string diag_one = "", diag_two = "", diag_three = "", diag_four = "";
        for (int i = 0; i < this->rows; i++)
        {
            diag_one += this->board[i][i];
            diag_two += this->board[this->rows - 1 - i][this->columns - 1 - i];
            diag_three += this->board[i][this->columns - 1 - i];
            diag_four += this->board[this->rows - 1 - i][i];
        }
        if (isValidWord(diag_one) || isValidWord(diag_two) || isValidWord(diag_three) || isValidWord(diag_four)) {
            return true;
        }

        return false;
    }

    bool is_draw() {
        return (this->n_moves == 9 && !is_win());
    }

    bool game_is_over() {
        if (is_win())
        {
            return true;
        }

        if (this->n_moves == 9 && !is_win())
        {
            return true;
        }

        return false;
    }
};

class WordTicTacToeHumanPlayer : public Player<char> {
public:
    WordTicTacToeHumanPlayer(string n, char symbol) : Player<char>(n, symbol) {}

    void getmove(int& x, int& y) override {
        cout << this->getname() << "'s turn:\n";

        while (true) {
            cout << "Enter your ROW: ";
            cin >> x;

            if (cin.fail() || x < 0 || x > 2) {
                cout << "Wrong row. Please enter 0, 1, or 2.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
            else {
                break;
            }
        }

        while (true) {
            cout << "Enter your COLUMN: ";
            cin >> y;

            if (cin.fail() || y < 0 || y > 2) {
                cout << "Wrong column. Please enter 0, 1, or 2.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }
            else {
                break;
            }
        }

    }
    void getFullMove(int& x, int& y, char& letter) {
        getmove(x, y);

        while (true) {
            cout << "Enter your LETTER: ";
            cin >> letter;
            if (isalpha(letter)) {
                letter = toupper(letter);
                break;
            }
            cout << "Wrong input. Please enter only letters.\n";
        }
    }
};

class WordTicTacToeComputerPlayer : public Player<char> {
public:
    WordTicTacToeComputerPlayer(char symbol) : Player<char>(symbol) {}

    void getmove(int& x, int& y) override {
        x = rand() % 3;
        y = rand() % 3;
    }

    void getmoveWithLetter(int& x, int& y, char& letter) {
        getmove(x, y);
        letter = static_cast<char>('A' + rand() % 26);

        cout << this->getname() << " Chooses: \n";
        cout << "ROW: " << x << "\n";
        cout << "COLUMN: " << y << "\n";
        cout << "LETTER: " << letter << "\n";
    }
};



void setupPlayer(string& player_Name, int& player_Type, char player_Symbol)
{
    cout << "Enter Player " << player_Symbol << " name: ";
    cin >> player_Name;

    while (true)
    {
        cout << "Choose Player " << player_Symbol << " type:\n";
        cout << "1. Human\n";
        cout << "2. Random Computer\n";

        cin >> player_Type;

        if (cin.fail() || (player_Type != 1 && player_Type != 2))
        {
            cout << "Wrong choice. Please enter 1 or 2.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        else
        {
            break;
        }
    }
}
void functionFromFile4() {

    srand(static_cast<unsigned int>(time(0)));


    string playerX_Name, playerO_Name;
    int playerX_Type, playerO_Type;

    setupPlayer(playerX_Name, playerX_Type, 'X');
    setupPlayer(playerO_Name, playerO_Type, 'O');

    Player<char>* playerX;
    Player<char>* playerO;

    if (playerX_Type == 1) {
        playerX = new WordTicTacToeHumanPlayer(playerX_Name, 'X');
    }
    else {
        playerX = new WordTicTacToeComputerPlayer('X');
    }

    if (playerO_Type == 1) {
        playerO = new WordTicTacToeHumanPlayer(playerO_Name, 'O');
    }
    else {
        playerO = new WordTicTacToeComputerPlayer('O');
    }

    WordTicTacToeBoard board;


    Player<char>* currentPlayer = playerX;
    char currentSymbol = 'X';
    while (!board.game_is_over()) {
        board.display_board();

        int x, y;
        char letter;

        if (dynamic_cast<WordTicTacToeHumanPlayer*>(currentPlayer)) {
            dynamic_cast<WordTicTacToeHumanPlayer*>(currentPlayer)->getFullMove(x, y, letter);
        }
        else {
            dynamic_cast<WordTicTacToeComputerPlayer*>(currentPlayer)->getmoveWithLetter(x, y, letter);
        }

        if (board.update_board(x, y, letter)) {
            if (board.is_win()) {
                board.display_board();
                cout << currentPlayer->getname() << " wins!" << endl;
                break;
            }
            else if (board.is_draw()) {
                board.display_board();
                cout << "It's a draw!" << endl;
                break;
            }


            currentPlayer = (currentPlayer == playerX) ? playerO : playerX;
            currentSymbol = (currentSymbol == 'X') ? 'O' : 'X';
        }
        else {
            cout << "Invalid move. Try again." << endl;
        }
    }

    delete playerX;
    delete playerO;
}
