#pragma once
#include "BoardGame_Classes.h"
#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;

const int SMALL_BOARD_SIZE = 3;
const int MAIN_BOARD_SIZE = 3;

class SmallBoard : public Board<char> {
public:
    char board[SMALL_BOARD_SIZE][SMALL_BOARD_SIZE];
    char winner;
    SmallBoard() : winner(' ') {
        for (int i = 0; i < SMALL_BOARD_SIZE; ++i)
            for (int j = 0; j < SMALL_BOARD_SIZE; ++j)
                board[i][j] = ' ';
    }

    bool update_board(int x, int y, char symbol) override {
        if (x < 0 || x >= SMALL_BOARD_SIZE || y < 0 || y >= SMALL_BOARD_SIZE || board[x][y] != ' ')
            return false;

        board[x][y] = symbol;
        check_winner();
        return true;
    }

    bool is_win() override {
        return winner != ' ';
    }

    bool is_draw() override {
        for (int i = 0; i < SMALL_BOARD_SIZE; ++i)
            for (int j = 0; j < SMALL_BOARD_SIZE; ++j)
                if (board[i][j] == ' ')
                    return false;
        return winner == ' ';
    }

    void display_board() override {
        for (int i = 0; i < SMALL_BOARD_SIZE; i++) {
            for (int j = 0; j < SMALL_BOARD_SIZE; j++) {
                cout << (board[i][j] == ' ' ? '.' : board[i][j]);
                if (j < SMALL_BOARD_SIZE - 1) cout << " | ";
            }
            cout << endl;
            if (i < SMALL_BOARD_SIZE - 1) cout << "--|---|--\n";
        }
    }
    bool game_is_over() override {
        return 0;
    }

    void check_winner() {
        for (int i = 0; i < SMALL_BOARD_SIZE; i++) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2])
                winner = board[i][0];
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i])
                winner = board[0][i];
        }

        if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2])
            winner = board[0][0];
        if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0])
            winner = board[0][2];
    }

    char getCell(int x, int y) const {
        return board[x][y];
    }
};

class UltimateBoard : public Board<char> {
private:
    SmallBoard* boards[9][9];
    char mainBoard[3][3];
    char winner;

public:
    UltimateBoard() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                boards[i][j] = new SmallBoard();
            }
        }
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                mainBoard[i][j] = ' ';
            }
        }
    }

    ~UltimateBoard() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                delete boards[i][j];
            }
        }
    }

    bool update_board(int x, int y, char symbol) override {
        int bigX = x / 3;
        int bigY = y / 3;
        int smallX = x % 3;
        int smallY = y % 3;

        if (mainBoard[bigX][bigY] != ' ')
            return false;

        bool validMove = boards[bigX][bigY]->update_board(smallX, smallY, symbol);
        if (validMove) {
            if (boards[bigX][bigY]->is_win()) {
                mainBoard[bigX][bigY] = symbol;
            }
            return true;
        }
        return false;
    }

    bool is_win() override {
        for (int i = 0; i < 3; i++) {
            if (mainBoard[i][0] != ' ' && mainBoard[i][0] == mainBoard[i][1] && mainBoard[i][1] == mainBoard[i][2]) {
                winner = mainBoard[i][0];
                return true;
            }
            if (mainBoard[0][i] != ' ' && mainBoard[0][i] == mainBoard[1][i] && mainBoard[1][i] == mainBoard[2][i]) {
                winner = mainBoard[0][i];
                return true;
            }
        }

        if (mainBoard[0][0] != ' ' && mainBoard[0][0] == mainBoard[1][1] && mainBoard[1][1] == mainBoard[2][2]) {
            winner = mainBoard[0][0];
            return true;
        }
        if (mainBoard[0][2] != ' ' && mainBoard[0][2] == mainBoard[1][1] && mainBoard[1][1] == mainBoard[2][0]) {
            winner = mainBoard[0][2];
            return true;
        }
        return false;
    }

    bool is_draw() override {
        if (mainBoard[0][0] != ' ' && mainBoard[0][1] != ' ' && mainBoard[0][2] != ' ' &&
            mainBoard[1][0] != ' ' && mainBoard[1][1] != ' ' && mainBoard[1][2] != ' ' &&
            mainBoard[2][0] != ' ' && mainBoard[2][1] != ' ' && mainBoard[2][2] != ' ') {
            return true;
        }

        int totalMoves = 0;
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                for (int k = 0; k < 3; ++k) {
                    for (int l = 0; l < 3; ++l) {
                        if (boards[i][j]->getCell(k, l) != ' ')
                            ++totalMoves;
                    }
                }
            }
        }

        return totalMoves == 81 && !is_win();
    }

    bool game_is_over() override {
        return is_win() || is_draw();
    }

    void display_board() override {
        cout << "Main Board:\n";
        cout << "\n";
        cout << "---------------------------\n";
        for (int i = 0; i < 3; i++) {
            cout << "    ";
            for (int j = 0; j < 3; j++) {
                cout << (mainBoard[i][j] == ' ' ? '-' : mainBoard[i][j]) << "  ";
                if (j < 2) cout << " |    ";
            }
            cout << endl;
            if (i < 2) cout << "---------------------------\n";
        }
        cout << "\nUltimate Tic Tac Toe Board:\n";
        cout << "\n";

        cout << "       ";
        for (int i = 0; i < 9; ++i) {
            cout << i << " ";
            if ((i + 1) % 3 == 0 && i != 8) cout << "| ";
        }
        cout << "\n";

        for (int i = 0; i < 9; ++i) {
            cout << ">> " << i << "   ";
            for (int j = 0; j < 9; ++j) {
                char cellSymbol = boards[i / 3][j / 3]->getCell(i % 3, j % 3);
                if (mainBoard[i / 3][j / 3] != ' ')
                    cellSymbol = mainBoard[i / 3][j / 3];
                cout << (cellSymbol == ' ' ? '.' : cellSymbol) << " ";
                if ((j + 1) % 3 == 0 && j != 8) cout << "| ";
            }
            cout << "\n";

            if ((i + 1) % 3 == 0 && i != 8) {
                cout << "       ";
                for (int j = 0; j < 9; ++j) {
                    cout << "--";
                    if ((j + 1) % 3 == 0 && j != 8) cout << "";
                    else cout << "-";
                }
                cout << "\n";
            }
        }
    }
};

template <typename T>
class Humanultimate : public Player<char> {
public:
    Humanultimate(string n, T symbol) : Player<T>(n, symbol) {}

    void getmove(int& x, int& y) override {
        while (true) {
            cout << this->getname() << "'s turn (" << this->getsymbol() << "):\n";
            cout << "Enter ur ROW and COLUMN: ";
            cin >> x >> y;

            if (cin.fail() || x < 0 || x > 8 || y < 0 || y > 8) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Wrong input! Please enter numbers between 0 and 8.\n";
            }

            else {
                break;
            }
        }
    }
};

template <typename T>
class LastRandomPlayer : public Player<T> {
public:
    LastRandomPlayer(T symbol) : Player<T>(symbol) {
        srand(time(nullptr));
    }

    void getmove(int& x, int& y) override {
        x = rand() % 9;
        y = rand() % 9;
    }
};

template <typename T>
class LastGameManager {
private:
    Board<T>* boardPtr;
    Player<T>* players[2];
    string playerNames[2];
    int totalMoves;

public:
    LastGameManager(Board<T>* board, Player<T>* playerPtr[2], string names[2])
        : boardPtr(board), players{ playerPtr[0], playerPtr[1] }, playerNames{ names[0], names[1] }, totalMoves(0) {}

    void run() {
        int currentPlayerIndex = 0;

        while (true) {
            boardPtr->display_board();
            int x, y;
            players[currentPlayerIndex]->getmove(x, y);

            if (!boardPtr->update_board(x, y, players[currentPlayerIndex]->getsymbol())) {
                cout << "Wrong move! Try again.\n";
                continue;
            }

            totalMoves++;

            if (boardPtr->is_win()) {
                boardPtr->display_board();
                cout << "Player " << playerNames[currentPlayerIndex] << " (" << players[currentPlayerIndex]->getsymbol() << ") wins the game!\n";
                break;
            }

            if (boardPtr->is_draw()) {
                boardPtr->display_board();
                cout << "It's a draw!\n";
                break;
            }

            currentPlayerIndex = 1 - currentPlayerIndex;
        }
    }
};
void functionFromFile8() {

    string player1Name, player2Name;
    char player1Symbol = 'X', player2Symbol = 'O';

    cout << "Enter Player X name: ";
    cin >> player1Name;
    cout << "Enter Player O name: ";
    cin >> player2Name;

    int player1Type, player2Type;
    while (true) {
        cout << "Choose Player X type:\n";
        cout << "1. Human\n";
        cout << "2. Random Computer\n";
        cin >> player1Type;
        if (cin.fail() || (player1Type != 1 && player1Type != 2)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Wrong choice. Please enter 1 or 2.\n";
        }
        else {
            break;
        }
    }

    Player<char>* player1;
    if (player1Type == 1) {
        player1 = new Humanultimate<char>(player1Name, player1Symbol);
    }
    else {
        player1 = new LastRandomPlayer<char>(player1Symbol);
    }

    while (true) {
        cout << "Choose Player O type:\n";
        cout << "1. Human\n";
        cout << "2. Random Computer\n";
        cin >> player2Type;
        if (cin.fail() || (player2Type != 1 && player2Type != 2)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Wrong choice. Please enter 1 or 2.\n";
        }
        else {
            break;
        }
    }

    Player<char>* player2;
    if (player2Type == 1) {
        player2 = new Humanultimate<char>(player2Name, player2Symbol);
    }
    else {
        player2 = new LastRandomPlayer<char>(player2Symbol);
    }

    UltimateBoard ultimateBoard;
    Player<char>* players[2] = { player1, player2 };
    string playerNames[2] = { player1Name, player2Name };

    LastGameManager<char> gameManager(&ultimateBoard, players, playerNames);
    gameManager.run();

    delete player1;
    delete player2;

}


